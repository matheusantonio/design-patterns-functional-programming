%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Lauro Cesar Araujo at 2015-04-27 19:43:45 -0300 


%% Saved with string encoding Unicode (UTF-8) 


@book{gamma:1995,
  address = {Reading, Massachusetts},
  author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John},
  biburl = {https://www.bibsonomy.org/bibtex/24224d6ab195636cfb8748468505a254f/gron},
  description = {Thesis},
  interhash = {666db7e026c02bfa3e89b7b2772d18a2},
  intrahash = {4224d6ab195636cfb8748468505a254f},
  isbn = {0-201-63361-2},
  keywords = {Me:MastersThesis},
  publisher = {Addison-Wesley},
  timestamp = {2014-08-31T18:41:37.000+0200},
  title = {Design Patterns: Elements of Reusable Object-Oriented Software},
  year = 1995
}

@book{wampler2021,
  title     = {Programming Scala},
  author    = {Wampler, Dean},
  year      = 2021,
  publisher = {O'Reilly Media, Inc.},
  ISBN      = {9781492077893}
}

@book{ordesky2008,
  title     = {Programming in Scala},
  author    = {Odersky, Martin and Spoon, Lex and Venners, Bill},
  year      = 2008,
  url       = {https://www.artima.com/pins1ed/}
}

@book{Sommerville10,
  address = {Harlow, England},
  author = {Sommerville, Ian},
  biburl = {https://www.bibsonomy.org/bibtex/2094b37a4bb8b242d7694cdc9142e0d80/flint63},
  edition = 9,
  groups = {public},
  interhash = {3cb472cdd9d5e4f37480b38846de450e},
  intrahash = {094b37a4bb8b242d7694cdc9142e0d80},
  isbn = {978-0-13-703515-1},
  keywords = {01841 105 book shelf software engineering development intro},
  publisher = {Addison-Wesley},
  timestamp = {2018-04-16T12:01:54.000+0200},
  title = {Software Engineering},
  username = {flint63},
  year = 2010
}

@book{reactiveprog,
  author         = {Blackheath, Stephen and Jones, Anthony},
  editor         = {Manning},
  title          = {Functional Reactive Programming},
  year           = {2016}
}

@unpublished {oracleooconcepts,
    author = {Oracle},
    title  = {Object-Oriented Programming Concepts},
    url    = {https://docs.oracle.com/javase/tutorial/java/concepts/}
}

@unpublished {purefunctionscala,
    author = {mlachkar and Phillipus and alvinj},
    title  = {Pure Functions},
    url    = {https://docs.scala-lang.org/overviews/scala-book/pure-functions.html}
}

@unpublished{hofscala,
  author = {mlachkar and alvinj},
  title  = {Passing functions around},
  url    = {https://docs.scala-lang.org/overviews/scala-book/passing-functions-around.html}
}

@unpublished{tuplesscala,
  author = {mlachkar and alvinj},
  title  = {Tuples},
  url    = {https://docs.scala-lang.org/overviews/scala-book/tuples.html}
}

@unpublished{yieldscala,
  title  = {How does yield work?},
  url    = {https://docs.scala-lang.org/tutorials/FAQ/yield.html}
}

@unpublished{camargomonads,
  author = {Marcelo Camargo},
  title  = {Então você ainda não entende Monads?},
  url    = {https://medium.com/rung-brasil/então-você-ainda-não-entende-monads-1ea62e0c14a7},
  year   = 2017
}

@unpublished{mflambdas,
  author = {Fowler, Martin},
  title  = {Lambda},
  url    = {https://martinfowler.com/bliki/Lambda.html},
  year   = 2004
}

@book{realworldhaskell,
    author = {O'Sullivan, Bryan and Stewart, Don and Goerzen, John},
    year = 2008,
    title = {Real World Haskell}
}

@book{braveclojure,
    author = {Higginbotham, Daniel},
    year = 2016,
    title = {Clojure for the Brave and True}
}

@book{functionalscala,
    author = {Chiusano, Paul and Bjarnason, Rúnar},
    year = 2013,
    title = {Functional Programming in Scala}
}

@book{scalafunctpatterns,
  author         = {Khot, Atul S.},
  title          = {Scala Functional Programming Patterns},
  publisher      = {Packt Publishing},
  year           = {2015}
}

@book{eloquentjs,
  author = {Haverbeke, Marijn},
  title = {Eloquent Javascript},
  year = 2018
}

@book{alexanderpatternlanguage,
  abstract = {The second of three books published by the Center for Environmental Structure to provide a "working alternative to our present ideas about architecture, building, and planning," <I>A Pattern Language</I> offers a practical language for building and planning based on natural considerations. The reader is given an overview of some 250 patterns that are the units of this language, each consisting of a design problem, discussion, illustration, and solution. By understanding recurrent design problems in our environment, readers can identify extant patterns in their own design projects and use these patterns to create a language of their own. Extraordinarily thorough, coherent, and accessible, this book has become a bible for homebuilders, contractors, and developers who care about creating healthy, high-level design. "Brilliant....Here's how to design or redesign any space you're living or working in--from metropolis to room. Consider what you want to happen in the space, and then page through this book. Its radically conservative observations will spark, enhance, organize your best ideas, and a wondrous home, workplace, town will result"--San Francisco Chronicle. A handbook designed for the layman which aims to present a language which people can use to express themselves in their own communities or homes, and to better communicate with each other.},
  added-at = {2008-05-28T12:47:08.000+0200},
  address = {New York},
  author = {Alexander, Christopher and Ishikawa, Sara and Silverstein, Murray},
  biburl = {https://www.bibsonomy.org/bibtex/260fb69c4f1e0fd302c9bd0d04642ca05/yish},
  citeulike-article-id = {305879},
  comment = {Alexander himself, in his seminal book (Alexander et al, 1978), describes a pattern called “Network of Learning”. The premise of this pattern is that in a society which emphasises teaching, learners become passive and unable to think or act for themselves. He argues that creative, active individuals can only grow up in a society which emphasises learning instead of teaching. The solution he proposes is to replace the structures of compulsory schooling in a fixed place, with decentralised processed of learning which engage learners through contact with many places and people all over the city: workshops, teachers at home, professionals will to take on the young as helpers, older children, museums, youth groups, scholarly seminars, industrial workshops, old people, and so on. This argument resonates with Ilich's call for “deschooling society” (1971) and conviviality (1973).}
}

@book{church1932set,
  title={A Set of Postulates for the Foundation of Logic},
  author={Church, A.},
  year={1932}
}

@book{church1936unsolvable,
  title={An Unsolvable Problem of Elementary Number Theory},
  author={Church, A.},
  year={1936},
  publisher={Hopkins}
}

@article{Gibbons&amp;Oliveira2008:Essence,
  title = {The Essence of the Iterator Pattern},
  author = {Jeremy Gibbons and Bruno César dos Santos Oliveira},
  year = {2009},
  journal = {Journal of Functional Programming},
  number = {3&amp;4},
  pages = {377-402},
  url = {http://www.comlab.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf},
  volume = {19},
  doi = {10.1017/S0956796809007291},
}

@InCollection{sep-turing-machine,
	author       =	{De Mol, Liesbeth},
	title        =	{Turing Machines},
	booktitle    =	{The {Stanford} Encyclopedia of Philosophy},
	editor       =	{Edward N. Zalta},
	howpublished =	{\url{https://plato.stanford.edu/archives/win2019/entries/turing-machine/}},
	year         =	{2019},
	edition      =	{Winter 2019},
	publisher    =	{Metaphysics Research Lab, Stanford University}
}

@InCollection{sep-church-turing,
	author       =	{Copeland, B. Jack},
	title        =	{The Church-Turing Thesis},
	booktitle    =	{The {Stanford} Encyclopedia of Philosophy},
	editor       =	{Edward N. Zalta},
	howpublished =	{\url{https://plato.stanford.edu/archives/sum2020/entries/church-turing/}},
	year         =	{2020},
	edition      =	{Summer 2020},
	publisher    =	{Metaphysics Research Lab, Stanford University}
}

@unpublished{didotnet,
  author = {Microsoft},
  title  = {Dependency injection in ASP.NET Core},
  url    = {https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-5.0},
  year   =  2020
}

@book{buonannofunctcsharp,
  author         = {Buonanno, Enrico},
  title          = {Functional Programming in C\#: How to write better C\# code},
  publisher      = {Manning},
  year           = 2017
}

@unpublished{denerocomposing,
  author = {John DeNero},
  title  = {Composing Functions},
  url    = {https://composingprograms.com/pages/16-higher-order-functions.html}
}

@unpublished {scottwlaschin,
    author = {Scott Wlaschin},
    title  = {Functional Programming Design Patterns},
	  year   = 2014,
    url    = {https://fsharpforfunandprofit.com/fppatterns/}
}

@unpublished {stuartsierra,
    author = {Stuart Sierra},
    title  = {Clojure Design Patterns},
  	year   = 2013,
    url    = {https://www.infoq.com/presentations/Clojure-Design-Patterns/}
}

@unpublished {mariofusco,
    author = {Mario Fusco},
    title  = {From GoF to Lambda},
	  year   = 2016,
    url    = {https://www.youtube.com/watch?v=Rmer37g9AZM\&t=122s}
}

@unpublished {peternorvig,
    author = {Peter Norvig},
    title  = {Design Patterns in Dynamic Languages},
	  year   = 1996,
    url    = {https://norvig.com/design-patterns/design-patterns.pdf}
}

@unpublished {nealford,
    author = {Neal Ford},
    title  = {Functional design patterns - Functional Thinking},
	  year   = 2012,
    url    = {https://www.ibm.com/developerworks/library/j-ft10/index.html}
}

@book{umlsystems,
  author         = {Eduardo Bezerra},
  title          = {Princípios de Análises e Projeto de Sistemas com UML},
  year           = {2006}
}

@article{quarkoo,
  author          = {Deb Armstrong},
  title           = {The quarks of object-oriented development},
  year            = {2006}
}

@unpublished{mlmodules,
  title  = {Module Systems and ML},
  year   = {2004},
  url    = {https://courses.cs.washington.edu/courses/cse341/04wi/lectures/09-ml-modules.html}
}

@unpublished{existentialhaskell,
  author = {Patrick Thomson},
  title  = {Existential Haskell},
  url    = {https://blog.sumtypeofway.com/posts/existential-haskell.html},
  year   = {2020}
}

@unpublished{classlessjs,
  author = {Richard Marmorstein},
  title  = {Classless Javascript},
  url    = {https://gist.github.com/twitchard/5ec53360ae109bb32e26742ddbc4cc93},
  year   = {2016}
}